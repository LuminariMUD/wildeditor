name: Same-Server Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'apps/mcp/**'
      - 'packages/auth/**'
      - '.github/workflows/same-server-deploy.yml'
      - 'docker-compose.same-server.yml'
      - 'nginx.conf'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'apps/mcp/**'
      - 'packages/auth/**'

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: 'ghcr.io'

jobs:
  # Test both backend and MCP
  test-services:
    name: Test Backend and MCP
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Test Backend
        run: |
          pip install -e packages/auth
          cd apps/backend/src
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
          pytest ../tests/ -v
          
      - name: Test MCP Server
        run: |
          pip install -e packages/auth
          cd apps/mcp
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          pytest tests/ -v

  # Build both Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test-services
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/luminarimud/wildeditor-backend:latest
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          
      - name: Build and push MCP image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/mcp/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/luminarimud/wildeditor-mcp:latest
          cache-from: type=gha,scope=mcp
          cache-to: type=gha,mode=max,scope=mcp

  # Deploy both services to the same server
  deploy-same-server:
    name: Deploy to Same Server
    runs-on: ubuntu-latest
    needs: [test-services, build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
          
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        env:
          MYSQL_DATABASE_URL: ${{ secrets.MYSQL_DATABASE_URL }}
          WILDEDITOR_API_KEY: ${{ secrets.WILDEDITOR_API_KEY }}
          WILDEDITOR_MCP_KEY: ${{ secrets.WILDEDITOR_MCP_KEY }}
        run: |
          # Ensure deployment directory exists on server
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "mkdir -p ~/wildeditor-deploy"
          
          # Copy deployment files to server
          scp docker-compose.same-server.yml ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:~/wildeditor-deploy/
          scp nginx.conf ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:~/wildeditor-deploy/
          
          # Deploy on server
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'DEPLOY_EOF'
          set -e
          
          echo "üöÄ Starting same-server deployment..."
          
          cd ~/wildeditor-deploy
          
          # Create environment file
          cat > .env << 'ENV_EOF'
          MYSQL_DATABASE_URL=${{ env.MYSQL_DATABASE_URL }}
          WILDEDITOR_API_KEY=${{ env.WILDEDITOR_API_KEY }}
          WILDEDITOR_MCP_KEY=${{ env.WILDEDITOR_MCP_KEY }}
          NODE_ENV=production
          BACKEND_PORT=8000
          MCP_PORT=8001
          ENV_EOF
          
          # Check if Docker Compose is available and install if needed
          if ! command -v docker &> /dev/null; then
            echo "‚ùå Docker is not installed on this server!"
            exit 1
          fi
          
          if ! docker compose version &> /dev/null; then
            echo "üì¶ Installing Docker Compose plugin..."
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          fi
          
          echo "üê≥ Docker Compose version: $(docker compose version)"
          
          # Pull latest images and restart services
          echo "üì• Pulling latest images and deploying..."
          docker compose -f docker-compose.same-server.yml pull
          docker compose -f docker-compose.same-server.yml down || true
          docker compose -f docker-compose.same-server.yml up -d
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Health checks
          echo "üîç Performing health checks..."
          
          # Check backend
          if curl -f http://localhost:8000/api/health; then
            echo "‚úÖ Backend is healthy"
          else
            echo "‚ùå Backend health check failed"
            docker-compose -f docker-compose.same-server.yml logs wildeditor-backend
            exit 1
          fi
          
          # Check MCP
          if curl -f http://localhost:8001/health; then
            echo "‚úÖ MCP server is healthy"
          else
            echo "‚ùå MCP server health check failed"
            docker-compose -f docker-compose.same-server.yml logs wildeditor-mcp
            exit 1
          fi
          
          # Check nginx (if enabled)
          if docker compose -f docker-compose.same-server.yml ps nginx | grep -q "Up"; then
            echo "‚úÖ Nginx reverse proxy is running"
            if curl -f http://localhost/health; then
              echo "‚úÖ Nginx routing to backend works"
            fi
            if curl -f http://localhost/mcp-health; then
              echo "‚úÖ Nginx routing to MCP works"
            fi
          fi
          
          echo "üéâ Same-server deployment completed successfully!"
          echo "üìä Service status:"
          docker compose -f docker-compose.same-server.yml ps
          
          DEPLOY_EOF
          
      - name: Verify deployment
        run: |
          echo "üîç Final deployment verification..."
          
          # Test external access to both services
          if curl -f http://${{ secrets.PRODUCTION_HOST }}:8000/api/health; then
            echo "‚úÖ Backend accessible externally"
          else
            echo "‚ö†Ô∏è Backend not accessible externally (may be firewalled)"
          fi
          
          if curl -f http://${{ secrets.PRODUCTION_HOST }}:8001/health; then
            echo "‚úÖ MCP server accessible externally"
          else
            echo "‚ö†Ô∏è MCP server not accessible externally (may be firewalled)"
          fi
          
          echo "‚úÖ Same-server deployment verification completed!"
